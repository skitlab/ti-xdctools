%/* 
% *  Copyright (c) 2010 Texas Instruments and others.
% *  All rights reserved. This program and the accompanying materials
% *  are made available under the terms of the Eclipse Public License v1.0
% *  which accompanies this distribution, and is available at
% *  http://www.eclipse.org/legal/epl-v10.html
% *
% *  Contributors:
% *      Texas Instruments - initial implementation
% *
% * */
%/*
% * ======== linkcmd.xdt ========
% *  This is template file is used to generate a linker command file for
% *  executables.  It provides a single place where we can embed information
% *  necessary to load/run executables.
% *
% *  This template is expanded after the configuration script runs and the
% *  results placed in a file (with extension .xdl) associated with the
% *  executable.
% *
% *  Linker templates are passed the following arguments:
% *     $out        - an open file stream for the generated linker
% *                   command file
% *     $args[]     - an array of zero or more libraries that should be linked
% *                   with (in the order they appear in the argument list)
% *
% *  In addition to these arguments, there is a global variable named
% *  'this' that is set as follows:
% *     this        - the program object
% */
%var _utils = xdc.loadCapsule("ti/targets/linkUtils.xs");
%var prog = this;    /* meaningful alias for this (== xdc.cfg.Program) */
/*
 * Do not modify this file; it is automatically generated from the template
 * linkcmd.xdt in the ti.platforms.tms320x28 package and will be overwritten.
 */

/*
 * put '"'s around paths because, without this, the linker
 * considers '-' as minus operator, not a file name character.
 */

%for (var i = 0; i < prog.$$asmvec.length; i++) {
"`prog.$$asmvec[i]`"
%}

%for (var i = 0; i < $args.length; i++) {
-l"`$args[i]`"
%}

%/* aliases interfere with whole_program and are unnecessary in this case */
%if (prog.build.profile.match(/whole_program/) == null) {
`_utils.genAliases(prog)`
%}

%/* There are symbols that exist when linking for ELF, but they need to
% * be referenced in both ELF and COFF builds, so we need to create them here
% * for COFF targets.
% */
`_utils.genElfSymbols(prog)`

--args `utils.toHex(prog.argSize)`
-heap  `utils.toHex(prog.heap)`
-stack `utils.toHex(prog.stack)`

/*
 * Linker command file contributions from all loaded packages:
 */
`_utils.genContributions($args)`

%/* if this is a partial link, don't do any section placement */
%if (prog.$$isasm) {
%    return;
%}

/*
 * symbolic aliases for static instance objects
 */
%for (var sym in prog.symbol) {
    %var inst = prog.symbol[sym];
    %if (typeof(inst) == 'number') {
`this.build.target.asmName(sym)` = `inst`;
    %}
    %else {
        %var objTab = inst.$module.$name.replace(/\./g, '_') + '_Object__table__V';
        %var off = prog.$capsule.instSize(inst) * inst.$index;
`this.build.target.asmName(sym)` = `this.build.target.asmName(objTab)` + `off`;
    %}
%}

%if (prog.platform.$orig.includeLinkCmdFile) {
-l "`prog.platform.$private.linkerFile`"
%}

SECTIONS
{
%/get section allocations */
%var sections = _utils.genSections(prog);
%sections = sections.replace(/^\s*xdc.meta\:\s.*$/m, "");
%sections = sections.replace(/^\s*xdc.noload\:\s.*$/m, "");
`sections`
    xdc.meta: type = COPY
%if ("xdc.runtime" in xdc.om && xdc.om['xdc.runtime.Text'].isLoaded != true) {
    xdc.noload: type = COPY
%}
}

%%{
/*
 * @(#) ti.platforms.tms320x28; 1, 0, 0,64; 8-17-2012 22:18:19; /db/ztree/library/trees/platform/platform-n27x/src/
 */

%%}
